# Inspired from

version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/sec-group-broker-filter # directory where steps will run

    docker: # run the steps with Docker
      # List of images at https://hub.docker.com/r/circleci/openjdk/tags
      #      - image: circleci/openjdk:8-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
      - image: circleci/openjdk:14-jdk-buster-node-browsers-legacy # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - run:
          name: Generate cumulative pom.xml checksum
          command: |
            find . -type f -name "pom.xml" -exec sh -c "sha256sum {} >> ~/pom-checksum.tmp" \;
            sort -o ~/pom-checksum ~/pom-checksum.tmp
          when: always
      - restore_cache:
          key: sec-group-broker-filter-{{ checksum "~/pom-checksum" }}

#      - run: mvn dependency:go-offline # gets the project dependencies
      - run: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies #gets the project dependencies include submodules

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: sec-group-broker-filter-{{ checksum "~/pom-checksum" }}

      - run: mvn package # run the actual tests

      # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      # See https://circleci.com/docs/2.0/collect-test-data/#maven-surefire-plugin-for-java-junit-results
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

      - run:
          name: save jar artefacts
          command: |
            mkdir -p ./artefacts/
            find . -path '**/target/*.jar' -exec cp {} ./artefacts/ \;
          when: always

      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
      - store_artifacts:
          path: ./artefacts
